/**
* DevExpress HTML/JS Reporting (designer\controls\xrUnknownControl.js)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { NotifyAboutWarning } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { ReportRenderingService } from '../services/_reportRenderingService';
import { HandlerUri } from '../utils/settings';
import { XRControlSurface } from './xrControl';
import { ReportViewModel } from './xrReport';
export class XRUnknownControlSurface extends XRControlSurface {
    constructor(control, context) {
        super(control, context);
        this.isLoading = ko.observable(false);
        this.imageSrc = ko.observable('');
        this.template = 'dxrd-shape';
        this.contenttemplate = 'dxrd-shape-content';
        var fetchTimeout = null;
        var lastFetch = null;
        this._disposables.push(ko.computed(() => {
            var _self = this;
            if (HandlerUri()) {
                fetchTimeout && clearTimeout(fetchTimeout);
                var zoomValue = _self._context.zoom();
                var measureUnit = _self._control.root.measureUnit();
                var serializedControl = new ModelSerializer().serialize(_self._control);
                fetchTimeout = setTimeout(() => {
                    _self.isLoading(true);
                    var report = new ReportViewModel({});
                    report.measureUnit(measureUnit);
                    report.bands()[1].createChild(serializedControl);
                    var serializedReport = report.serialize();
                    report.dispose();
                    var deferred = ReportRenderingService.getUnknownControlImage(serializedReport, zoomValue);
                    lastFetch = deferred;
                    deferred.done(function (result) {
                        if (lastFetch === deferred) {
                            _self.isLoading(false);
                            _self.imageSrc('data:image/x;base64,' + result.Img);
                        }
                    }).fail(function (jqXHR) {
                        if (lastFetch === deferred) {
                            _self.isLoading(false);
                            NotifyAboutWarning('Impossible to get control image.');
                        }
                    });
                }, 200);
            }
        }));
    }
}
