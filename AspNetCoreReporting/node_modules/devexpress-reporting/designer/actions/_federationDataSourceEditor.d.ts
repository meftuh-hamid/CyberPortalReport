/**
* DevExpress HTML/JS Reporting (designer\actions\_federationDataSourceEditor.d.ts)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
import { FederationDataSource } from '@devexpress/analytics-core/analytics-data';
import { IDataSourceInfo as analyticIDataSourceInfo } from '@devexpress/analytics-core/analytics-internal';
import { IAction, IItemsProvider, UndoEngine } from '@devexpress/analytics-core/analytics-utils';
import { TreeListItemViewModel } from '@devexpress/analytics-core/analytics-widgets-internal';
import { DataSourceWizard, IDataSourceWizardState } from '@devexpress/analytics-core/analytics-wizard';
import { IMultiQueryDataSourceWizardCallbacks } from '@devexpress/analytics-core/analytics-wizard-internal';
import { FederatedQueriesHelper, ManageFederatedQueriesEditor, MasterDetailEditor } from '@devexpress/analytics-core/queryBuilder-widgets-internal';
import * as ko from 'knockout';
import { ReportViewModel } from '../controls/xrReport';
import { DataSourceHelper } from '../helpers/_dataSourceHelper';
import { DataSourceEditorBase, IDataSourceInfo } from './_sqlDataSourceEditor';
export declare class FederationDataSourceEditor extends DataSourceEditorBase {
    private _rtl;
    private _callbacks;
    constructor(dsHelper: ko.Observable<DataSourceHelper> | ko.Computed<DataSourceHelper>, wizard: DataSourceWizard, reportViewModel: ko.Observable<ReportViewModel> | ko.Computed<ReportViewModel>, undoEngine: ko.Observable<UndoEngine> | ko.Computed<UndoEngine>, itemsProvider: ko.Observable<IItemsProvider> | ko.Computed<IItemsProvider>, _rtl: boolean, _callbacks: IMultiQueryDataSourceWizardCallbacks);
    private _applyFederationDataSourceWizardChanges;
    applyFederationDataSourceWizardChanges(dataSourceWizardModel: IDataSourceWizardState): JQuery.Promise<IDataSourceInfo>;
    static createFederationDataSourceInfo(dataSource: FederationDataSource): JQueryPromise<IDataSourceInfo>;
    getFederationDataSourceByInfo(dataSourceInfo: analyticIDataSourceInfo): JQuery.Promise<FederationDataSource>;
    editMasterDetailRelations(dataSourceID: string): void;
    saveDataSourceInfo(federationDataSource: FederationDataSource, dataSourceInfo: analyticIDataSourceInfo): void;
    openManageQueriesEditor(dataSourceID: string): void;
    addAction: {
        clickAction: (item: TreeListItemViewModel) => void;
        imageClassName: string;
        imageTemplateName: string;
        text: any;
    };
    editAction: {
        clickAction: (item: TreeListItemViewModel) => void;
        position: number;
        imageClassName: string;
        imageTemplateName: string;
        text: any;
    };
    editRelationsAction: {
        clickAction: (item: TreeListItemViewModel) => void;
        position: number;
        imageClassName: string;
        imageTemplateName: string;
        text: any;
    };
    removeAction: {
        clickAction: (item: TreeListItemViewModel) => void;
        position: number;
        imageClassName: string;
        imageTemplateName: string;
        text: any;
    };
    getActions(context: TreeListItemViewModel): IAction[];
    relationsEditor: ko.Observable<MasterDetailEditor>;
    manageQueriesEditor: ko.Observable<ManageFederatedQueriesEditor>;
    queriesPopupHelper: ko.Observable<FederatedQueriesHelper>;
}
