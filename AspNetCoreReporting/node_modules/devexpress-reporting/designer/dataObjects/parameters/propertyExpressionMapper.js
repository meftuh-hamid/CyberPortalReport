/**
* DevExpress HTML/JS Reporting (designer\dataObjects\parameters\propertyExpressionMapper.js)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { editorTemplates } from '@devexpress/analytics-core/analytics-widgets';
import * as ko from 'knockout';
export class PropertyExpressionMapper {
    constructor() {
        this._mapper = {};
    }
    getExpressionPropertyName(propertyName) {
        return propertyName.substr(0, 1).toLocaleUpperCase() + propertyName.substr(1) + 'ExpressionObj';
    }
    registerExpressionProperty(property) {
        var newPropertyName = this.getExpressionPropertyName(property.propertyName);
        var expressionInfo = {
            propertyName: newPropertyName,
            editor: editorTemplates.getEditor('expressionEditor'),
            displayName: property.displayName,
            localizationId: property.localizationId
        };
        this._mapper[newPropertyName] = {
            showExpression: ko.observable(false)
        };
        return expressionInfo;
    }
    isPropertyVisible(propertyName, editingMode) {
        if (!editingMode)
            return !this._mapper[propertyName];
        var expressionProperty = this.getExpressionProperty(propertyName);
        return expressionProperty ? (!!this._mapper[propertyName] === expressionProperty.showExpression()) : true;
    }
    getExpressionProperty(propertyName) {
        return this._mapper[propertyName] || this._mapper[this.getExpressionPropertyName(propertyName)];
    }
}
PropertyExpressionMapper.propertiesWithExpressions = ['visible', 'enabled'];
