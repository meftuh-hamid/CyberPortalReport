/**
* DevExpress Analytics (query-builder\utils\requestwrapper.d.ts)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/// <reference types="jquery" />
import { IAjaxSettings } from '../../core/utils/_utils';
import { SqlDataConnection } from '../dataSource/sql/sqlDataConnection';
import { DBTable } from '../dataSource/dbTable';
import { SqlDataSource } from '../dataSource/sql/sqlDataSource';
import { JsonDataSource } from '../dataSource/json/jsonDataSource';
import { IParameter } from '../wizard/internal/_utils';
import { FederationDataSource } from '../dataSource/federation/federationDataSource';
export interface ISelectStatementResponse {
    sqlSelectStatement: string;
    errorMessage: string;
}
export interface IUriJsonSourceValidationResult {
    isUriValid: boolean;
    faultMessage?: string;
}
export declare class RequestWrapper {
    sendRequest<T = any>(action: string, arg: string): JQueryPromise<T>;
    _sendRequest<T = any>(settings: IAjaxSettings): JQueryPromise<T>;
    getDbSchema(connection: SqlDataConnection, tables?: DBTable[]): JQueryPromise<{
        dbSchemaJSON: string;
    }>;
    getDbStoredProcedures(connection: SqlDataConnection): JQueryPromise<{
        dbSchemaJSON: string;
    }>;
    getSelectStatement(connection: SqlDataConnection, queryJSON: string): JQueryPromise<ISelectStatementResponse>;
    getDataPreview(connection: SqlDataConnection, queryJSON: string): JQueryPromise<{
        dataPreviewJSON: string;
    }>;
    rebuildResultSchema(dataSource: SqlDataSource, queryName?: string, relationsEditing?: boolean): JQueryPromise<{
        resultSchemaJSON: string;
        connectionParameters?: string;
    }>;
    getFederationResultSchema(dataSource: FederationDataSource): JQueryPromise<{
        resultSchemaJSON: string;
    }>;
    validateJsonUri(jsonDataSource: JsonDataSource): JQueryPromise<IUriJsonSourceValidationResult>;
    saveJsonSource(connectionName: string, jsonDataSource: JsonDataSource): JQueryPromise<string>;
    getJsonSchema(jsonDataSource: JsonDataSource, parameters: IParameter[]): JQueryPromise<{
        jsonSchemaJSON: string;
    }>;
    getObjectTypeDescriptions(context: string): JQueryPromise<{
        objectDataSourceInfoJson: string;
    }>;
}
