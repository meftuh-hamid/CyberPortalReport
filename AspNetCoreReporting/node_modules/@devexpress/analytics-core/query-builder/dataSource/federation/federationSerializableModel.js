/**
* DevExpress Analytics (query-builder\dataSource\federation\federationSerializableModel.js)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { ModelSerializer } from '../../../serializer/serializer';
import { Disposable } from '../../../serializer/utils';
export class SerializableDataFederationDataSource extends Disposable {
    constructor(dataSource, serializer) {
        super();
        this.dataSources = ko.observableArray([]);
        this.serializer = serializer || new ModelSerializer();
        if (dataSource) {
            this.dataSource = dataSource;
            this.dataSources(this._currentDataSources);
        }
    }
    get _currentDataSources() {
        var dataSources = [];
        this.dataSource && this.dataSource.serializableSourceMap().reduce((result, x) => {
            if (result.indexOf(x.dataSource()) === -1)
                result.push(x.dataSource());
            return result;
        }, dataSources);
        return dataSources;
    }
    _collectDependentDataSources(item, resultArray) {
        if (item.serializableSourceMap) {
            item.serializableSourceMap().forEach(x => this._collectDependentDataSources(x.dataSource(), resultArray));
        }
        var existedItem = resultArray.filter(x => ko.unwrap(x.name) === ko.unwrap(item.name))[0];
        !existedItem && resultArray.push(item);
    }
    dispose() {
        this.dataSource = null;
        this.dataSources = null;
    }
    getInfo() {
        return [
            { propertyName: 'dataSources', modelName: 'dataSources', array: true },
            { propertyName: 'dataSource', modelName: 'dataSource' }
        ];
    }
    collectDependentDataSources() {
        var dependentDataSources = [];
        this._currentDataSources.forEach(item => this._collectDependentDataSources(item, dependentDataSources));
        return dependentDataSources;
    }
    serialize() {
        var clonedModel = new SerializableDataFederationDataSource(null);
        clonedModel.dataSource = this.dataSource;
        clonedModel.dataSources(this.collectDependentDataSources());
        var serializedModel = this.serializer.serialize(clonedModel);
        clonedModel.dispose();
        return serializedModel;
    }
    getSerializableFederationDataSourceInfo() {
        var serializedModel = this.serialize();
        return {
            dataSource: JSON.stringify(serializedModel.dataSource),
            dataSources: Object.keys(serializedModel.dataSources).map(key => JSON.stringify(serializedModel.dataSources[key]))
        };
    }
}
