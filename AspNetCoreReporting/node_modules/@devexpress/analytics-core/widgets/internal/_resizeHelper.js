/**
* DevExpress Analytics (widgets\internal\_resizeHelper.js)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { extend } from '../../serializer/_utils';
import * as ko from 'knockout';
import * as $ from 'jquery';
export class ResizeHelper {
    constructor(resultSize, disabled = ko.observable(false)) {
        this.resultSize = resultSize;
        this.disabled = disabled;
        this._resize = (deltaWidth, deltaHeight, oldDelta, element) => {
            if (this.resultSize) {
                this.resultSize(this.resultSize() - (deltaWidth || deltaHeight) + oldDelta);
            }
            else {
                if (element) {
                    if (deltaWidth) {
                        const newWidth = element.offsetWidth - deltaWidth + oldDelta;
                        element.style.width = `${newWidth}px`;
                    }
                    else if (deltaHeight) {
                        const newHeight = element.offsetHeight + deltaHeight - oldDelta;
                        element.style.height = `${newHeight}px`;
                    }
                }
            }
            return deltaWidth || deltaHeight;
        };
    }
    resizable(resizeHandler, handles) {
        if (!resizeHandler)
            resizeHandler = { starting: () => { }, stopped: () => { } };
        var oldDelta = 0;
        return extend({}, resizeHandler, {
            handles: handles,
            $selectedNodes: $.fn.constructor(),
            stopped: () => { oldDelta = 0; },
            resize: (event, element, boundsDiff) => {
                oldDelta = this._resize(-boundsDiff.width, boundsDiff.height, oldDelta, element);
            },
            handleClassName: 'dxd-back-secondary',
            disabled: this.disabled
        });
    }
}
