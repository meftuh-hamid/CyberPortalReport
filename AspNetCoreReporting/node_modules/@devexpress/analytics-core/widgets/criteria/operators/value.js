/**
* DevExpress Analytics (widgets\criteria\operators\value.js)
* Version:  22.2.4
* Build date: Jan 25, 2023
* Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { CriteriaOperator } from './criteriaOperator';
import { validateGuid } from '../../../property-grid/widgets/internal/_internal';
import { parseDate } from '../../../property-grid/localization/_localization';
import { criteriaCreator } from '../utils/criteriaOperatorPreprocessor';
export class OperandValue extends CriteriaOperator {
    constructor(value) {
        super();
        this.type = 'value';
        var result = value !== null && value !== undefined ? value : '';
        var isGuid = validateGuid(value);
        if (value && value['length'] && ((value[0] === "'" && value[value.length - 1] === "'") || isGuid)) {
            this.specifics = 'string';
            if (isGuid && value[0] === '{' && value[value.length - 1] === '}')
                this.specifics = 'guid';
            result = this._processStringValue(value);
        }
        else if (value && value['length'] && value[0] === '#' && value[value.length - 1] === '#') {
            result = value.slice(1, value.length - 1);
            result = parseDate(result);
            if (!result) {
                result = parseDate(value.slice(1, value.length - 1));
            }
        }
        else if (String(value).toLowerCase() === 'true' || String(value).toLowerCase() === 'false') {
            result = String(value).toLowerCase() === 'true' ? 'True' : 'False';
        }
        this.value = result;
    }
    _processStringValue(value) {
        var result = value.slice(1, value.length - 1);
        if (result.indexOf("''") !== -1)
            result = result.replace("''", "'");
        return result;
    }
    get displayType() {
        return this.value || '?';
    }
}
criteriaCreator.register('value', (options) => {
    return new OperandValue(options.value);
});
